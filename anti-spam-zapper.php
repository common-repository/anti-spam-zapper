<?php/*Plugin Name: Anti-Spam ZapperPlugin URI: https://www.designsmoke.com/anti-spam-zapper-wordpress-plugin/Description: Anti-Spam Zapper stops spam comments from being posted on your website without annoying questions or CAPTCHAs.Version: 0.9.5Author: DesignSmoke Web DesignAuthor URI: https://www.designsmoke.com/Text Domain: anti-spam-zapperLicense: GPL2*//*    Copyright (C) 2019 DesignSmoke    This plugin is free software; you can redistribute it and/or modify    it under the terms of the GNU General Public License as published by    the Free Software Foundation; either version 2 of the License, or    (at your option) any later version.    This plugin is distributed in the hope that it will be useful,    but WITHOUT ANY WARRANTY; without even the implied warranty of    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the    GNU General Public License for more details.    You should have received a copy of the GNU General Public License along    with this program; if not, write to the Free Software Foundation, Inc.,    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.*/$GLOBALS['antispamzp_blacklist_loaded'] = false;if(!function_exists('wp_get_current_user')) {    include_once(ABSPATH . "wp-includes/pluggable.php"); }if(!class_exists("WordPress_SimpleSettings")) {    include('wordpress-simple-settings.php');}class AntiSpamZapper extends WordPress_SimpleSettings {    var $prefix = 'antispamzapper'; // this is super recommended    	function __construct() {		parent::__construct(); // this is required		// Actions		add_action('admin_menu', array($this, 'menu') );		register_activation_hook(__FILE__, array($this, 'activate') );	}	function menu() {		add_options_page("Anti-Spam Zapper", "Anti-Spam Zapper", 'manage_options', "anti-spam-zapper", array($this, 'admin_page') );	}	function admin_page() {		include 'admin.php';	}	function activate() {		if($this->get_setting('antispamzp_enable_credits') === false)			$ret = $this->add_setting('antispamzp_enable_credits', 0);		if($this->get_setting('antispamzp_enable_blacklist') === false)			$ret = $this->add_setting('antispamzp_enable_blacklist', 1);		if($this->get_setting('antispamzp_install_date') === false)			$ret = $this->add_setting('antispamzp_install_date', date('Y-m-d h:i:s'));		if($this->get_setting('antispamzp_rating_div') === false)			$ret = $this->add_setting('antispamzp_rating_div', 'no');			}}$GLOBALS['AntiSpamZapper'] = new AntiSpamZapper();// Load the listsfunction antispamzp_load_lists() {	if(!$GLOBALS['antispamzp_blacklist_loaded']) {		$GLOBALS['antispamzp_blacklist_loaded'] = true;		$GLOBALS['antispamzp_blacklist_comments'] = file(dirname(__FILE__).'/lists/comments.txt');		$GLOBALS['antispamzp_blacklist_urls'] = file(dirname(__FILE__).'/lists/urls.txt');	}}//admin dashboard request, not secure, perms not checkedif(is_admin()) {	function antispamzp_admin_notices() {	    // Ask user for a review after 1 week	    $install_date = $GLOBALS['AntiSpamZapper']->get_setting('antispamzp_install_date');	    $display_date = date( 'Y-m-d h:i:s' );	    $datetime1 = new DateTime( $install_date );	    $datetime2 = new DateTime( $display_date );	    $diff_intrval = round( ($datetime2->format( 'U' ) - $datetime1->format( 'U' )) / (60 * 60 * 24) );	    if( $diff_intrval >= 7 && ($GLOBALS['AntiSpamZapper']->get_setting('antispamzp_rating_div') == "no") ) {	        echo '<div class="antispamzp_fivestar update-nag" style="display:block; box-shadow: 0 1px 1px 0 rgba(0,0,0,.1);">	    	<p>'.__('You\'ve been using <strong>Anti-Spam Zapper</strong> for over a week, and I just wanted to know if it solved your spam problem? <br> If so, is there any chance you\'d be able to <a href="https://wordpress.org/plugins/anti-spam-zapper/#reviews">give it a review on WordPress?', 'anti-spam-zapper').'</a><br><br>	        '.__('This would be extremely helpful to me and many others, and would encourage people to try out the plugin.<br>If there were any bugs or issues, just let me know and I can fix them!', 'anti-spam-zapper' ).'	        <ul>	            <li class="float:left"><a href="https://wordpress.org/plugins/anti-spam-zapper/#reviews" class="thankyou button button-primary" target="_new" title="Review it!" style="color: #ffffff;-webkit-box-shadow: 0 1px 0 #256e34;box-shadow: 0 1px 0 #256e34;font-weight: normal;float:left;margin-right:10px;">'.__('Sure, I\'ll review it!','anti-spam-zapper').'</a></li>	            <li class="float:left"><a href="javascript:void(0);" class="button action aszapRating" target="_new" title="Review it!" >'.__('Dismiss','anti-spam-zapper').'</a></li>	        </ul>	    </div>	    <script>	    jQuery( document ).ready(function( $ ) {		    jQuery(\'.aszapRating\').click(function(){	        var data={\'action\':\'antispamzp_hide_rating\'}	             jQuery.ajax({	        	        url: "' . admin_url( 'admin-ajax.php' ) . '",	        type: "post",	        data: data,	        dataType: "json",	        async: !0,	        success: function(e) {	            //if (e=="success") {				   	            //}	        }	         });		// Hide it without latency		jQuery(\'.antispamzp_fivestar\').slideUp(\'fast\');	        })	    	    });	    </script>	    ';	    }	}	add_action( 'admin_notices', 'antispamzp_admin_notices' );}// Ajax callback, hides the rating div and has no parameters or optionsfunction antispamzp_hide_rating() {	$GLOBALS['AntiSpamZapper']->update_setting('antispamzp_rating_div', 'hide');	wp_send_json_success('success');	die();}add_action('wp_ajax_antispamzp_hide_rating', 'antispamzp_hide_rating');// Add rate-this plugin linkfunction antispamzp_row_meta( $links, $file ) {        if ( plugin_basename( __FILE__ ) == $file ) {        $row_meta = array(          'rate-plugin'    => '<a href="' . esc_url( 'https://wordpress.org/support/plugin/anti-spam-zapper/reviews/#new-post' ) . '" target="_blank" style="font-weight:bold;">'.__('Rate This Plugin','anti-spam-zapper').'&raquo;</a>'        );        return array_merge( $links, $row_meta );    }    return (array) $links;}add_filter( 'plugin_row_meta', 'antispamzp_row_meta', 10, 2 );// Add settings page link on leftfunction antispamzp_action_links( $links ) {   $links[] = '<a href="'. esc_url( get_admin_url(null, 'options-general.php?page=anti-spam-zapper') ) .'">'.__('Settings','anti-spam-zapper').'</a>';   $links[] = '<a href="https://www.designsmoke.com/anti-spam-zapper-wordpress-plugin/" target="_blank">'.__('Upgrade to Pro','anti-spam-zapper').'</a>';   return $links;}add_filter( 'plugin_action_links_' . plugin_basename(__FILE__), 'antispamzp_action_links' );function antispamzp_contains($str, $term, $nocase=false) {	if($nocase) {		$str = strtolower($str);		$term = strtolower($term);	}	return strpos($str, $term) !== false;}function antispamzp_random_text($len=8) { //Not cryptographically secure	$val = '';	for( $i=0; $i<$len; $i++ ) {	   $val .= chr( rand( 65, 90 ) );	}	return $val;}function antispamzp_get_secret_key() {	$val = get_option('antispamzp_secret_key');	if ($val === false) {		$val = strtolower(antispamzp_random_text(16));		update_option('antispamzp_secret_key', $val);	}	return $val;}function antispamzp_check_blacklisted($phrase, $blarray, $nocase=true) {	foreach ($blarray as $ib) {		$b = trim($ib);		if(strlen($b) == 0)			continue; //blank		if($b[0] === '/')			if($b[1] === '/')				continue; //comment				if($b[0] === "*") { //encoded for potentially harmful/offensive terms			if(antispamzp_contains($phrase, base64_decode(substr($b,1)), $nocase)) return true; //blacklisted phrase, b64-encoded		} else {			if(antispamzp_contains($phrase, $b, $nocase)) return true; //blacklisted phrase		}	}	return false;}// Hook comments before inserting into DBfunction antispamzp_pre_comment_approved($approved, $commentdata){	// Todo: comment_author_IP check blacklist	antispamzp_load_lists(); // Ensure loaded!	global $antispamzp_blacklist_comments, $antispamzp_blacklist_urls; // Load up the globals	$antispamzp_super_secret_key = antispamzp_get_secret_key(); // Load/Create the Secret	if((!isset($_POST[$antispamzp_super_secret_key])) && (!isset($_GET[$antispamzp_super_secret_key]))) { // Doesn't have our "secret" key! D:		return 'spam'; // spam	}	if($GLOBALS['AntiSpamZapper']->get_setting('antispamzp_enable_blacklist')) {		if(antispamzp_check_blacklisted(			$commentdata['comment_content'] .'  '.$commentdata['comment_author'] .'  '. $commentdata['comment_author_email'] .'  '. $commentdata['comment_author_url'],			$antispamzp_blacklist_comments,			true		)) return 'spam'; // mark spam			if(strlen($commentdata['comment_author_url']) > 250) return 'spam'; //URL too long		if(antispamzp_check_blacklisted($commentdata['comment_author_url'], $antispamzp_blacklist_urls, true)) return 'spam'; //blacklisted URL	}	return $approved; // don't modify anything}add_filter('pre_comment_approved', 'antispamzp_pre_comment_approved', '99', 2);function antispamzp_get_fake_atob($name4) { // make it harder for bots to parse	return "			var ".'c'.antispamzp_random_text(6)." = Function('".$name4."',\"return atob(".$name4.")\")('".base64_encode(antispamzp_random_text(16))."');";}function antispamzp_comment_form_after() {	// Block Useragents:	if(strlen($_SERVER['HTTP_USER_AGENT']) <= 5) {		return;	}	if(antispamzp_check_blacklisted(strtolower($_SERVER['HTTP_USER_AGENT']), array('phantomjs','baidu','python-','curl/','backlink','node','zbot') ,true)) {		return;	}	$name1 = 'a'.antispamzp_random_text(6); //hidden class	$name2 = 'b'.antispamzp_random_text(6); //hidden value	$name3 = 'c'.antispamzp_random_text(6); //key var name	$name4 = antispamzp_random_text(6); //atob function name	?>		<style>.<?php echo $name1; ?> { display: none; }</style>		<script>			if(navigator.userAgent == "") {throw new Error(); } else {<?php for($i=0;$i<rand(0,4);$i++) { echo antispamzp_get_fake_atob($name4) . "\r\n"; } //Add fakes to make it harder for bots ?>			var <?php echo $name3; ?> = Function('<?php echo $name4 ?>',"return atob(<?php echo $name4 ?>)")('<?php echo base64_encode(antispamzp_get_secret_key()); ?>');<?php for($i=0;$i<rand(0,4);$i++) { echo antispamzp_get_fake_atob($name4) . "\r\n"; } //Add fakes to make it harder for bots  ?>			jQuery("<input type='text' id='website' class='<?php echo $name1; ?>' name='"+<?php echo $name3; ?>+"' value='<?php echo $name2; ?>' />").appendTo('.comment-form,#commentform');		}		</script>		<noscript>			<p style="background-color: #ffeb00; color:#f00; padding: 2px;"><bold>Warning:</bold> <?php echo __('This form requires JavaScript to function properly! Your messages will not be sent.', 'anti-spam-zapper'); ?></p>			<style>.comment-form input[type="submit"] { display:none; }</style>		</noscript>		<?php if($GLOBALS['AntiSpamZapper']->get_setting('antispamzp_enable_credits')): ?>			<div class="zp-info-line"><span class="zp-checkmark"></span> This comment form is protected with <a rel="component" href="https://www.designsmoke.com/anti-spam-zapper-wordpress-plugin/">Anti-Spam Zapper</a></div>			<style>				.zp-checkmark:after { content: "\2713"; color: #30d060; line-height: 0; text-align: center; font-weight: bold; }				.zp-info-line { display: block; padding-left: 5px; }			</style>		<?php endif; ?>	<?php}add_action('comment_form_after', 'antispamzp_comment_form_after');